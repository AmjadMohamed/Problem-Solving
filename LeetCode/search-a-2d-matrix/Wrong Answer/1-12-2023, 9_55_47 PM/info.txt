{"id":877013310,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1673553347,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/877013310/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"N/A","code":"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int l = 0 , r = matrix.size()-1 , mid = 0 , CandidateRow = 0;\n        // binary search to find the candidate row based on the first column numbers \n        while(l <= r)\n        {\n            mid = (l+r)/2;\n            if(target < matrix[mid][0])\n            {\n                r = mid-1;\n            }\n            else if(target > matrix[mid][0])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n\n        CandidateRow = mid;\n        l = 0 , r = matrix[mid].size()-1 , mid = 0;\n\n        // binary search on the candidate row\n        while(l <= r)\n        {\n            mid = (l+r)/2;\n            if(target < matrix[CandidateRow][mid])\n            {\n                r = mid - 1;\n            }\n            else if(target > matrix[CandidateRow][mid])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111101001111111111111111111111111111111111111111011111111111111111111101101101111111111","title_slug":"search-a-2d-matrix","has_notes":false}