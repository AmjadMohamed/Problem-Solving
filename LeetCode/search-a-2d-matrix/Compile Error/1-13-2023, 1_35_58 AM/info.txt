{"id":877101181,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1673566558,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/877101181/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"N/A","code":" poclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int l = 0 , r = matrix.size() , mid = 0 , CandidateRow = 0;\n        // lower bound binary search to find the candidate row based on the first column numbers \n        while(l < r)\n        {\n            mid = l + (r-l)/2;\n            if(target < matrix[mid][0])\n            {\n                r = mid;\n            }\n            else if(target > matrix[mid][0])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n\n        CandidateRow = l;\n        if(CandidateRow > 0) // getting the right position to search from\n            CandidateRow--;\n            \n        l = 0 , r = matrix[CandidateRow].size()-1 , mid = 0;\n\n        // binary search on the candidate row\n        while(l <= r)\n        {\n            mid = l + (r-l)/2;\n            if(target < matrix[CandidateRow][mid])\n            {\n                r = mid - 1;\n            }\n            else if(target > matrix[CandidateRow][mid])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n};","compare_result":null,"title_slug":"search-a-2d-matrix","has_notes":false}