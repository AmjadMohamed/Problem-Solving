{"id":877009949,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1673552944,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/877009949/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"N/A","code":"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int l = 0 , r = matrix.size() , mid = 0 , PreferredRow = 0;\n        // binary search to find the candidate row based on the first column numbers \n        while(l <= r)\n        {\n            mid = (l+r)/2;\n            if(target < matrix[mid][0])\n            {\n                r = mid-1;\n            }\n            else if(target > matrix[mid][0])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n\n        PreferredRow = mid;\n        l = 0 , r = matrix[mid].size() , mid = 0;\n\n        while(l <= r)\n        {\n            mid = (l+r)/2;\n            if(target < matrix[PreferredRow][mid])\n            {\n                r = mid - 1;\n            }\n            else if(target > matrix[PreferredRow][mid])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n};","compare_result":"1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-a-2d-matrix","has_notes":false}